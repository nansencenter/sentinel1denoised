import matplotlibmatplotlib.use('agg')import matplotlib.pyplot as pltfrom s1denoise.S1_TOPS_GRD_NoiseCorrection import Sentinel1Imageimport numpy as npimport osimport sysimport globimport matplotlib.ticker as tickerfrom matplotlib.ticker import FixedLocator, FixedFormatterdef norm8(img, percentile):    """Convert image to data type uint8"""    mask = np.isnan(img)    minmax = np.percentile(img[~mask], [percentile, 100 - percentile])    img = np.round((img - minmax[0]) / np.diff(minmax) * 254)    img[img < 0] = 0    img[img > 254] = 255    img[mask] = 0    return img.astype(np.uint8)def plot(fname, out_dir_path):    n = Sentinel1Image(fname)    ia = n['incidence_angle']    ia = np.mean(ia, axis=0)    ia = [('%.0f' % x) for x in ia]    res = n.getS0Nesz(polarization)    s0 = res['sz']    esa_nesz = res['nesz_esa']    nersc_nesz = res['nesz_nersc']    denoised_nersc = s0 - nersc_nesz    denoised_nersc_db = 10 * np.log10(denoised_nersc)    denoised_esa = s0 - esa_nesz    denoised_esa_db = 10 * np.log10(denoised_esa)    data_nersc = norm8(denoised_nersc_db, 5)    data_esa = norm8(denoised_esa_db, 5)    plt.clf()    #plt.rcParams['xtick.major.pad'] = '10'    f, axarr = plt.subplots(2, 1)    # f.suptitle('%s' % os.path.basename(fname))    axarr[0].imshow(data_esa, cmap='gray', interpolation='bilinear')    axarr[0].axis('off')    axarr[0].set_title('ESA')    im_nersc = axarr[1].imshow(data_nersc, cmap='gray', interpolation='bilinear')    axarr[1].axis('on')    axarr[1].axes.get_yaxis().set_visible(False)    #axarr[1].set_xticklabels(ia)    '''    mid_idx = round(len(ia)/2)    x_formatter = FixedFormatter([ia[0], ia[mid_idx], ia[-1]])    x_locator = FixedLocator([denoised_esa_db.shape[1][0], mid_idx, denoised_esa_db.shape[1][-1]])    axarr[1].xaxis.set_major_formatter(x_formatter)    axarr[1].xaxis.set_major_locator(x_locator)    '''    axarr[1].set_title('NERSC')    # Colorbar    '''    cb_data_nersc = np.arange(np.nanmin(data_nersc), np.nanmax(data_nersc), 1.)    cb_data_nersc_db = np.arange(np.nanmin(denoised_nersc_db), np.nanmax(denoised_nersc_db), 1.)    cbar = plt.colorbar(im_nersc, ticks=cb_data_nersc, orientation='vertical')    cbar.ax.set_ylabel(cb_data_nersc_db)    '''    plt.savefig('%s/denoise_comp__%s.png' % (out_dir_path, os.path.basename(fname)), bbox_inches='tight', dpi=800)ffiles = glob.glob('%s/*.zip' % sys.argv[1])polarization = sys.argv[2]base_dir = os.path.dirname(ffiles[0])out_dir_path = '%s/visual_comp' % base_dirnpz_dir_path = '%s/npz' % base_dirtry:    os.makedirs(out_dir_path)except:    passtry:    os.makedirs(npz_dir_path)except:    pass# Plotting#for fname in ffiles:#    plot(fname, out_dir_path)# Dictonary for ESA and NERSC QAM resultsd_res_esa =  {}d_res_nersc = {}for fname in ffiles:    id_name = os.path.basename(fname).split('.')[0]    d_res_esa[id_name] = {}    d_res_nersc[id_name] = {}# Open first file to get keys of results1 = Sentinel1Image(ffiles[0])res_qam = s1.qualityAssesment(polarization)keys = list(res_qam['QAM_ESA'].keys())for id_key in list(d_res_esa.keys()):    for k in keys:        d_res_esa[id_key][k] = []        d_res_nersc[id_key][k] = []for fname in ffiles:    id_name = os.path.basename(fname).split('.')[0]    s1 = Sentinel1Image(fname)    res_qam = s1.qualityAssesment(polarization)    keys = list(res_qam['QAM_ESA'].keys())    for k in keys:        d_res_esa[id_name][k].append(res_qam['QAM_ESA'][k])        d_res_nersc[id_name][k].append(res_qam['QAM_NERSC'][k])np.savez('%s/ESA_QAM.npz' % npz_dir_path, **d_res_esa)np.savez('%s/NERSC_QAM.npz' % npz_dir_path, **d_res_nersc)